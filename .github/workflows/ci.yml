name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['9.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore vscode-restclient-dotnet.slnx
      
    - name: Build
      run: dotnet build vscode-restclient-dotnet.slnx --no-restore --configuration Release --verbosity minimal
      
    - name: Test
      run: dotnet test vscode-restclient-dotnet.slnx --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: TestResults/*.trx

  code-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore vscode-restclient-dotnet.slnx
      
    - name: Build
      run: dotnet build vscode-restclient-dotnet.slnx --no-restore --configuration Release --verbosity minimal
      
    - name: Test with coverage
      run: dotnet test vscode-restclient-dotnet.slnx --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults
      
    - name: Generate Code Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:MarkdownSummaryGithub
        
    - name: Comment coverage summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('coveragereport/SummaryGithub.md', 'utf8');
          await github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: TestResults
        fail_ci_if_error: false
        verbose: true

  build-matrix:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['9.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Restore dependencies
      run: dotnet restore vscode-restclient-dotnet.slnx
      
    - name: Build
      run: dotnet build vscode-restclient-dotnet.slnx --no-restore --configuration Release --verbosity minimal
      
    - name: Test
      run: dotnet test vscode-restclient-dotnet.slnx --no-build --configuration Release --verbosity normal
