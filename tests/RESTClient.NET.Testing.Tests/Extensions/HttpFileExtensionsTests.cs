using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using AwesomeAssertions;
using RESTClient.NET.Core.Models;
using RESTClient.NET.Core.Parsing;
using RESTClient.NET.Testing.Extensions;
using RESTClient.NET.Testing.Models;
using Xunit;

namespace RESTClient.NET.Testing.Tests.Extensions
{
    public class HttpFileExtensionsTests
    {
        [Fact]
        public void GetTestData_WithValidHttpFile_ShouldReturnTestData()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name test-request
GET http://localhost:5000/api/users";
            var httpFile = parser.Parse(content);

            // Act
            var testData = httpFile.GetTestData().ToList();

            // Assert
            testData.Should().NotBeEmpty();
            testData.Should().HaveCount(1);
            testData[0].Should().HaveCount(1);
            testData[0][0].Should().BeOfType<HttpTestCase>();
        }

        [Fact]
        public void GetTestData_WithNullHttpFile_ShouldThrowArgumentNullException()
        {
            // Arrange
            HttpFile httpFile = null!;

            // Act & Assert
            Action act = () => httpFile.GetTestData();
            act.Should().Throw<ArgumentNullException>()
                .WithParameterName("httpFile");
        }

        [Fact]
        public void GetTestCases_WithValidHttpFile_ShouldReturnTestCases()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name test-request
GET http://localhost:5000/api/users";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().NotBeEmpty();
            testCases.Should().HaveCount(1);
            testCases[0].Name.Should().Be("test-request");
        }

        [Fact]
        public void GetTestCases_WithMultipleRequests_ShouldReturnAllTestCases()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"@baseUrl = http://localhost:5000

# @name get-users
# @expect status 200
GET {{baseUrl}}/api/users

# @name create-user
# @expect status 201
# @expect header Content-Type application/json
POST {{baseUrl}}/api/users
Content-Type: application/json

{""name"": ""John""}";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(2);
            
            var getUsersCase = testCases.First(tc => tc.Name == "get-users");
            getUsersCase.Method.Should().Be("GET");
            getUsersCase.Url.Should().Be("http://localhost:5000/api/users");
            getUsersCase.ExpectedResponse.Should().NotBeNull();
            getUsersCase.ExpectedResponse!.ExpectedStatusCode.Should().Be(200);

            var createUserCase = testCases.First(tc => tc.Name == "create-user");
            createUserCase.Method.Should().Be("POST");
            createUserCase.Body.Should().Contain("John");
            createUserCase.ExpectedResponse!.ExpectedStatusCode.Should().Be(201);
        }

        [Fact]
        public void GetTestCases_WithAutoGeneratedRequestNames_ShouldSkipThem()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"### user-endpoint
GET http://localhost:5000/api/users

###
GET http://localhost:5000/api/products";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(1);
            testCases[0].Name.Should().Be("user-endpoint");
        }

        [Fact]
        public void GetTestCases_WithEmptyUrl_ShouldSkipRequest()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name valid-request
GET http://localhost:5000/api/users

# @name invalid-request
";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(1);
            testCases[0].Name.Should().Be("valid-request");
        }

        [Fact]
        public void Filter_WithNullTestCases_ShouldThrowArgumentNullException()
        {
            // Arrange
            IEnumerable<HttpTestCase> testCases = null!;

            // Act & Assert
            Action act = () => testCases.Filter();
            act.Should().Throw<ArgumentNullException>()
                .WithParameterName("testCases");
        }

        [Fact]
        public void Filter_WithNamePattern_ShouldFilterCorrectly()
        {
            // Arrange
            var testCases = new List<HttpTestCase>
            {
                new() { Name = "get-users", Method = "GET", Url = "http://localhost/users" },
                new() { Name = "create-user", Method = "POST", Url = "http://localhost/users" },
                new() { Name = "get-products", Method = "GET", Url = "http://localhost/products" }
            };

            // Act
            var filtered = testCases.Filter(namePattern: "user").ToList();

            // Assert
            filtered.Should().HaveCount(2);
            filtered.Should().OnlyContain(tc => tc.Name.Contains("user", StringComparison.OrdinalIgnoreCase));
        }

        [Fact]
        public void Filter_WithMethods_ShouldFilterCorrectly()
        {
            // Arrange
            var testCases = new List<HttpTestCase>
            {
                new() { Name = "get-users", Method = "GET", Url = "http://localhost/users" },
                new() { Name = "create-user", Method = "POST", Url = "http://localhost/users" },
                new() { Name = "update-user", Method = "PUT", Url = "http://localhost/users/1" }
            };

            // Act
            var filtered = testCases.Filter(methods: new[] { "GET", "POST" }).ToList();

            // Assert
            filtered.Should().HaveCount(2);
            filtered.Should().OnlyContain(tc => tc.Method == "GET" || tc.Method == "POST");
        }

        [Fact]
        public void Filter_WithHasExpectations_ShouldFilterCorrectly()
        {
            // Arrange
            var testCases = new List<HttpTestCase>
            {
                new() { Name = "test1", Method = "GET", Url = "http://localhost/test1", ExpectedResponse = null },
                new() { Name = "test2", Method = "GET", Url = "http://localhost/test2", ExpectedResponse = new HttpExpectedResponse { ExpectedStatusCode = 200 } },
                new() { Name = "test3", Method = "GET", Url = "http://localhost/test3", ExpectedResponse = new HttpExpectedResponse() }
            };

            // Act
            var withExpectations = testCases.Filter(hasExpectations: true).ToList();
            var withoutExpectations = testCases.Filter(hasExpectations: false).ToList();

            // Assert
            withExpectations.Should().HaveCount(1);
            withExpectations[0].Name.Should().Be("test2");
            
            withoutExpectations.Should().HaveCount(2);
            withoutExpectations.Should().Contain(tc => tc.Name == "test1");
            withoutExpectations.Should().Contain(tc => tc.Name == "test3");
        }

        [Fact]
        public void ToHttpRequestMessage_WithNullTestCase_ShouldThrowArgumentNullException()
        {
            // Arrange
            HttpTestCase testCase = null!;

            // Act & Assert
            Action act = () => testCase.ToHttpRequestMessage();
            act.Should().Throw<ArgumentNullException>()
                .WithParameterName("testCase");
        }

        [Fact]
        public void ToHttpRequestMessage_WithBasicRequest_ShouldCreateValidMessage()
        {
            // Arrange
            var testCase = new HttpTestCase
            {
                Name = "test-request",
                Method = "GET",
                Url = "http://localhost:5000/api/users",
                Headers = new Dictionary<string, string>
                {
                    { "Authorization", "Bearer token123" },
                    { "Accept", "application/json" }
                }
            };

            // Act
            var requestMessage = testCase.ToHttpRequestMessage();

            // Assert
            requestMessage.Should().NotBeNull();
            requestMessage.Method.Should().Be(HttpMethod.Get);
            requestMessage.RequestUri.Should().Be("http://localhost:5000/api/users");
            requestMessage.Headers.Should().Contain(h => h.Key == "Authorization");
            requestMessage.Headers.Should().Contain(h => h.Key == "Accept");
        }

        [Fact]
        public async Task ToHttpRequestMessage_WithPostRequestAndBody_ShouldCreateValidMessage()
        {
            // Arrange
            var testCase = new HttpTestCase
            {
                Name = "create-user",
                Method = "POST",
                Url = "http://localhost:5000/api/users",
                Headers = new Dictionary<string, string>
                {
                    { "Content-Type", "application/json" },
                    { "Authorization", "Bearer token123" }
                },
                Body = @"{""name"": ""John Doe"", ""email"": ""john@example.com""}"
            };

            // Act
            var requestMessage = testCase.ToHttpRequestMessage();

            // Assert
            requestMessage.Should().NotBeNull();
            requestMessage.Method.Should().Be(HttpMethod.Post);
            requestMessage.Content.Should().NotBeNull();
            
            var content = await requestMessage.Content!.ReadAsStringAsync();
            content.Should().Contain("John Doe");
            
            // Content-Type should be on the content headers, not request headers
            requestMessage.Content.Headers.Should().Contain(h => h.Key == "Content-Type");
            requestMessage.Headers.Should().Contain(h => h.Key == "Authorization");
        }

        [Fact]
        public void ToHttpRequestMessage_WithDifferentHttpMethods_ShouldCreateCorrectMethods()
        {
            // Arrange
            var testCases = new[]
            {
                new HttpTestCase { Name = "get", Method = "GET", Url = "http://localhost/get" },
                new HttpTestCase { Name = "post", Method = "POST", Url = "http://localhost/post" },
                new HttpTestCase { Name = "put", Method = "PUT", Url = "http://localhost/put" },
                new HttpTestCase { Name = "delete", Method = "DELETE", Url = "http://localhost/delete" },
                new HttpTestCase { Name = "patch", Method = "PATCH", Url = "http://localhost/patch" }
            };

            foreach (var testCase in testCases)
            {
                // Act
                var requestMessage = testCase.ToHttpRequestMessage();

                // Assert
                requestMessage.Method.ToString().Should().Be(testCase.Method);
            }
        }

        [Fact]
        public void GetTestCases_WithExpectations_ShouldParseAllExpectationTypes()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name comprehensive-test
# @expect status 200
# @expect header Content-Type application/json
# @expect body-contains success
# @expect body-path $.status success
# @expect schema /schemas/user.json
# @expect max-time 5000ms
GET http://localhost:5000/api/users";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(1);
            var testCase = testCases[0];
            
            testCase.ExpectedResponse.Should().NotBeNull();
            var response = testCase.ExpectedResponse!;
            
            response.ExpectedStatusCode.Should().Be(200);
            response.ExpectedHeaders.Should().ContainKey("Content-Type");
            response.ExpectedHeaders["Content-Type"].Should().Be("application/json");
            response.ExpectedBodyContains.Should().Be("success");
            response.ExpectedBodyPath.Should().Be("$.status success");
            response.ExpectedSchemaPath.Should().Be("/schemas/user.json");
            response.MaxResponseTime.Should().Be(TimeSpan.FromMilliseconds(5000));
        }

        [Fact]
        public void GetTestCases_WithTimeSpanParsing_ShouldHandleVariousFormats()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name test-ms
# @expect max-time 1500ms
GET http://localhost:5000/api/test1

# @name test-s
# @expect max-time 5s
GET http://localhost:5000/api/test2";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(2);
            
            var msTest = testCases.First(tc => tc.Name == "test-ms");
            msTest.ExpectedResponse!.MaxResponseTime.Should().Be(TimeSpan.FromMilliseconds(1500));
            
            var sTest = testCases.First(tc => tc.Name == "test-s");
            sTest.ExpectedResponse!.MaxResponseTime.Should().Be(TimeSpan.FromSeconds(5));
        }

        [Fact]
        public void GetTestCases_WithMetadata_ShouldConvertBasicMetadata()
        {
            // Arrange
            var parser = new HttpFileParser();
            var content = @"# @name test-with-metadata
GET http://localhost:5000/api/test";
            var httpFile = parser.Parse(content);

            // Act
            var testCases = httpFile.GetTestCases().ToList();

            // Assert
            testCases.Should().HaveCount(1);
            var testCase = testCases[0];
            
            testCase.Name.Should().Be("test-with-metadata");
            testCase.Metadata.Should().NotBeNull();
            // The metadata dictionary should be empty for this simple case
            // as there are no custom metadata fields in this implementation
        }
    }
}
